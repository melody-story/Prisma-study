// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Voice {
    id	                  Int       @default(autoincrement()) @id
    file_size	          Bytes     @db.ByteA   
    url	                  String    @db.VarChar(500) 
    // user	              User?     @relation(fields: [userId], references: [id])
    userId	              Int           
    sentenceRequirement	  SentenceRequirement? @relation(fields: [sentenceRequirementId], references: [id])
    sentenceRequirementId Int
    dateOfCreated	      DateTime  @db.Timestamptz(3)  @default(now())
    dateOfUpdated	      DateTime? @db.Timestamptz(3) @updatedAt
    voiceStatus           VoiceStatus?
}

model VoiceStatus {
    id      	    Int       @default(autoincrement()) @id
    voice	        Voice     @relation(fields: [voiceId], references: [id])
    voiceId	        Int       
    downloadCount	Int       @default(0)    
    // client	    Client?     @relation(fields: [clientId], references: [id])
    clientId   	    Int      
    verify      	String    @db.VarChar(50)
    // user	        User?     @relation(fields: [userId], references: [id])
    userId	        Int       
    dateOfCreated	DateTime  @db.Timestamptz(3) @default(now())
    dateOfUpdated	DateTime? @db.Timestamptz(3) @updatedAt
}

model Script {
    id	            Int           @default(autoincrement()) @id
    title	        String        @db.VarChar(50) @unique
    url	            String        @db.VarChar(500)
    file_size	    Bytes         @db.ByteA   //수정
    remarks         String        @db.VarChar(1000) 
    // client	    Client?       @relation(fields: [clientId], references: [id])
    clientId	    Int?     
    dateOfCreated	DateTime      @db.Timestamptz(3) @default(now())
    dateOfUpdated	DateTime?     @db.Timestamptz(3) @updatedAt
    scriptStatus    ScriptStatus?
    sentance        Sentance?
}

model ScriptStatus {
    id	            Int       @default(autoincrement()) @id
    script	        Script    @relation(fields: [scriptId], references: [id])
    scriptId	    Int       @db.Integer//FK
    post	        Boolean   @db.Boolean @default(false)
    deadline	    Boolean   @db.Boolean @default(false)
    downloadCount	Int       @default(0)
    // client	    Client?   @relation(fields: [clientId], references: [id])
    clientId	    Int?      
    dateOfCreated	DateTime  @db.Timestamptz(3) @default(now())
    dateOfUpdated	DateTime? @db.Timestamptz(3) @updatedAt
}

model Sentance {
    id	                Int       @default(autoincrement()) @id
    script	            Script    @relation(fields: [scriptId], references: [id])
    scriptId	        Int      
    context	            String    @db.VarChar(5000)
    dateOfCreated	    DateTime  @db.Timestamptz(3) @default(now())
    dateOfUpdated	    DateTime? @db.Timestamptz(3) @updatedAt
    sentenceRequirement SentenceRequirement?
}

model SentenceStatus {
    id	                  Int      @default(autoincrement()) @id
    sentanceRequirement	  SentenceRequirement     @relation(fields: [sentanceRequirementId], references: [id])
    sentanceRequirementId Int      
    deadlineStatus	      Boolean  @db.Boolean @default(false)
    dateOfCreated	      DateTime  @db.Timestamptz(3) @default(now())
    dateOfUpdated	      DateTime? @db.Timestamptz(3) @updatedAt
}

model SentenceRequirement {
    id             Int       @default(autoincrement()) @id
    language       String    @db.VarChar(50)
    age	           Int?      
    gender         String?   @db.VarChar(50)
    sentence	   Sentance  @relation(fields: [sentenceId], references: [id])
    sentenceId	   Int      
    dateOfCreated  DateTime  @db.Timestamptz(3) @default(now())
    dateOfUpdated  DateTime? @db.Timestamptz(3) @updatedAt
    voice	       Voice?    
    sentenceStatus SentenceStatus?
}